diff --git a/gio/tests/meson.build b/gio/tests/meson.build
index 5c0e033..33d103c 100644
--- a/gio/tests/meson.build
+++ b/gio/tests/meson.build
@@ -453,167 +453,6 @@ if installed_tests_enabled
   install_data('static-link.py', install_dir : installed_tests_execdir)
 endif
 
-if not meson.is_cross_build() or meson.has_exe_wrapper()
-
-  plugin_resources_c = custom_target('plugin-resources.c',
-    input : 'test4.gresource.xml',
-    output : 'plugin-resources.c',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--generate-source',
-               '--c-name', '_g_plugin',
-               '@INPUT@'])
-
-  shared_module('resourceplugin', 'resourceplugin.c', plugin_resources_c,
-    link_args : export_dynamic_ldflags,
-    dependencies : common_gio_tests_deps,
-    install_dir : installed_tests_execdir,
-    install : installed_tests_enabled
-  )
-
-  # referenced by test2.gresource.xml
-  big_test_resource = custom_target(
-    'gresource-big-test.txt',
-    input : ['gen-big-test-resource.py'],
-    output : ['gresource-big-test.txt'],
-    command : [python, '@INPUT0@', '@OUTPUT@'])
-
-  test_gresource = custom_target('test.gresource',
-    input : 'test.gresource.xml',
-    output : 'test.gresource',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--sourcedir=' + meson.current_build_dir(),
-               '@INPUT@'],
-    install_dir : installed_tests_execdir,
-    install : installed_tests_enabled)
-
-  test_resources2_c = custom_target('test_resources2.c',
-    input : 'test3.gresource.xml',
-    output : 'test_resources2.c',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--generate',
-               '--c-name', '_g_test2',
-               '--manual-register',
-               '@INPUT@'])
-
-  test_resources2_h = custom_target('test_resources2.h',
-    input : 'test3.gresource.xml',
-    output : 'test_resources2.h',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--generate',
-               '--c-name', '_g_test2',
-               '--manual-register',
-               '@INPUT@'])
-
-  test_resources_c = custom_target('test_resources.c',
-    input : 'test2.gresource.xml',
-    depends : big_test_resource,
-    output : 'test_resources.c',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--sourcedir=' + meson.current_build_dir(),
-               '--generate-source',
-               '--c-name', '_g_test1',
-               '@INPUT@'])
-
-  digit_test_resources_c = custom_target('digit_test_resources.c',
-    input : '111_digit_test.gresource.xml',
-    output : 'digit_test_resources.c',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--sourcedir=' + meson.current_build_dir(),
-               '--generate-source',
-               '--manual-register',
-               '@INPUT@'])
-
-  digit_test_resources_h = custom_target('digit_test_resources.h',
-    input : '111_digit_test.gresource.xml',
-    output : 'digit_test_resources.h',
-    command : [glib_compile_resources,
-               '--target=@OUTPUT@',
-               '--sourcedir=' + meson.current_source_dir(),
-               '--generate',
-               '--manual-register',
-               '@INPUT@'])
-
-  # referenced by test.gresource.xml
-  test_generated_txt = configure_file(input : 'test1.txt',
-    output : 'test-generated.txt',
-    copy : true,
-    install : false)
-
-  # Create object file containing resource data
-  # for testing the external data option
-  if build_machine.system() == 'linux'
-    test_gresource_binary = custom_target('test5.gresource',
-      input : 'test5.gresource.xml',
-      output : 'test5.gresource',
-      command : [glib_compile_resources,
-                 '--target=@OUTPUT@',
-                 '--sourcedir=' + meson.current_source_dir(),
-                 '--sourcedir=' + meson.current_build_dir(),
-                 '@INPUT@'],
-      install_dir : installed_tests_execdir,
-      install : installed_tests_enabled)
-
-       # Create resource data file
-    test_resources_binary_c = custom_target('test_resources_binary.c',
-      input : 'test5.gresource.xml',
-      output : 'test_resources_binary.c',
-      command : [glib_compile_resources,
-                 '--target=@OUTPUT@',
-                 '--sourcedir=' + meson.current_source_dir(),
-                 '--sourcedir=' + meson.current_build_dir(),
-                 '--generate-source',
-                 '--external-data',
-                 '--c-name', '_g_binary_test1',
-                 '@INPUT@'])
-
-       # Create object file containing resource data
-    test_resources_binary = custom_target('test_resources.o',
-      input : test_gresource_binary,
-      output : 'test_resources.o',
-      command : ['ld',
-                 '-r',
-                 '-b','binary',
-                 '@INPUT@',
-                 '-o','@OUTPUT@'])
-
-       # Rename symbol to match the one in the C file
-    test_resources_binary2 = custom_target('test_resources2.o',
-      input : test_resources_binary,
-      output : 'test_resources2.o',
-      command : ['objcopy',
-                 '--add-symbol','_g_binary_test1_resource_data=.data:0',
-                 '@INPUT@',
-                 '@OUTPUT@'])
-
-    gio_tests += {
-      'resources' : {
-        'extra_sources' : [test_gresource, test_resources_c, test_resources2_c,
-                           test_resources2_h, test_resources_binary_c,
-                           test_resources_binary2, digit_test_resources_c, digit_test_resources_h],
-      },
-    }
-  else
-    gio_tests += {
-      'resources' : {
-        'extra_sources' : [test_gresource, test_resources_c, test_resources2_c,
-                           test_resources2_h, digit_test_resources_c, digit_test_resources_h],
-      },
-    }
-  endif
-endif
-
 foreach test_name, extra_args : gio_tests
   source = extra_args.get('source', test_name + '.c')
   extra_sources = extra_args.get('extra_sources', [])
